// CAC-TAT.spec.js created with Cypress
//
// Start writing your Cypress tests below!
// If you're unfamiliar with how Cypress works,
// check out the link below and learn how to write your first test:
// https://on.cypress.io/writing-first-test

describe('Central de Atendimento ao Cliente TAT', function () {
  beforeEach(() => {
    cy.visit('./src/index.html');
  });

  it('verifica o t칤tulo da aplica칞칚o', function () {
    cy.title().should('eq', 'Central de Atendimento ao Cliente TAT');
  });

  it('preenche os campos obrigat칩rios e envia o formul치rio', () => {
    cy.clock();
    cy.get('#firstName').type('Eduardo');
    cy.get('#lastName').type('Nowakoski');
    cy.get('#email').type('eduardo_nowa@hotmail.com');
    cy.get('#open-text-area').type('Estou com problemas no meu acesso');
    cy.contains('button[type="submit"]', 'Enviar').click();
    cy.get('.success').should('be.visible');
    cy.tick(3000);
    cy.get('.success').should('not.be.visible');
  });
  it('digitar um texto longo na 치rea de texto, passando como segundo argumento do comando `.type()`, um objeto (`{}`) com a propriedade `delay` com valor `0`.', () => {
    cy.get('#open-text-area').type(
      'Estou com problemas no meu acesso Estou com problemas no meu acesso Estou com problemas no meu acesso Estou com problemas no meu acesso Estou com problemas no meu acessoEstou com problemas no meu acesso Estou com problemas no meu acesso',
      { delay: 0 }
    );
  });
  it('exibe mensagem de erro ao submeter o formul치rio com um email com formata칞칚o inv치lida`', () => {
    cy.clock();
    cy.contains('button[type="submit"]', 'Enviar').click();
    cy.get('.error').should('be.visible');
    cy.tick(3000);
    cy.get('.error').should('not.be.visible');
  });
  it('crie um teste para validar que, se um valor n칚o-num칠rico for digitado, seu valor continuar치 vazio', () => {
    cy.get('#phone').type('adsaasdas').should('have.value', '');
  });

  it(`exibe mensagem de erro quando o telefone se torna obrigat칩rio mas n칚o 칠 preenchido antes do envio do formul치rio`, () => {
    cy.clock();
    cy.get('#firstName').type('Eduardo');
    cy.get('#lastName').type('Nowakoski');
    cy.get('#email').type('eduardo_nowa@hotmail.com');
    cy.get('#open-text-area').type('Estou com problemas no meu acesso');
    cy.get('#phone-checkbox').check();
    cy.contains('button[type="submit"]', 'Enviar').click();
    cy.get('.error').should('be.visible');
    cy.tick(3000);
    cy.get('.error').should('not.be.visible');
  });
  it('`preenche e limpa os campos nome, sobrenome, email e telefone`', () => {
    cy.get('#firstName')
      .type('Eduardo')
      .should('have.value', 'Eduardo')
      .clear()
      .should('have.value', '');
  });

  it('exibe mensagem de erro ao submeter o formul치rio sem preencher os campos obrigat칩rios', () => {
    cy.clock();
    cy.contains('button[type="submit"]', 'Enviar').click();
    cy.get('.error').should('be.visible');
    cy.tick(3000);
    cy.get('.error').should('not.be.visible');
  });

  it('envia o formu치rio com sucesso usando um comando customizado', () => {
    cy.clock();
    cy.fillMandatoryFieldsAndSubmit();
    cy.tick(3000);
    cy.get('.success').should('not.be.visible');
  });

  it('seleciona um produto (YouTube) por seu texto', () => {
    cy.get('#product').select('YouTube').should('have.value', 'youtube');
  });

  it('seleciona um produto (Mentoria) por seu valor (value)', () => {
    cy.get('#product').select('mentoria').should('have.value', 'mentoria');
  });

  it('seleciona um produto (Blog) por seu 칤ndice', () => {
    cy.get('#product').select(1).should('have.value', 'blog');
  });

  it('marca o tipo de atendimento "Feedback', () => {
    cy.get('input[type="radio"][value = "feedback"]')
      .check()
      .should('be.checked');
  });

  it('marca cada tipo de atendimento', () => {
    cy.get('input[type="radio"]')
      .should('have.length', 3)
      .each((item) => {
        cy.wrap(item).check();
        cy.wrap(item).should('be.checked');
      });
  });

  it('marca ambos checkboxes, depois desmarca o 칰ltimo', () => {
    cy.get('input[type="checkbox"]')
      .check()
      .should('be.checked')
      .last()
      .uncheck()
      .should('not.be.checked');
  });

  it('seleciona um arquivo da pasta fixtures', () => {
    cy.get('input[type="file"]#file-upload')
      .should('not.have.value')
      .selectFile('./cypress/fixtures/example.json')
      .should((input) => {
        expect(input[0].files[0].name).to.equal('example.json');
      });
  });

  it('seleciona um arquivo simulando um drag-drop', () => {
    cy.get('input[type="file"]#file-upload')
      .should('not.have.value')
      .selectFile('./cypress/fixtures/example.json', {
        action: 'drag-drop',
      })
      .should((input) => {
        expect(input[0].files[0].name).to.equal('example.json');
      });
  });

  it('seleciona um arquivo utilizando uma fixture para a qual foi dada um alias', () => {
    cy.fixture('example.json').as('exampleFile');
    cy.get('input[type="file"]#file-upload')
      .should('not.have.value')
      .selectFile('@exampleFile')
      .should((input) => {
        expect(input[0].files[0].name).to.equal('example.json');
      });
  });

  it('verifica que a pol칤tica de privacidade abre em outra aba sem a necessidade de um clique', () => {
    cy.get('#privacy > a').should('have.attr', 'target', '_blank');
  });

  it('acessa a p치gina da pol칤tica de privacidade removendo o target e ent칚o clicando no link', () => {
    cy.get('#privacy > a').invoke('removeAttr', 'target').click();
    cy.contains('Talking About Testing').should('be.visible');
  });

  it('exibe e esconde as mensagens de sucesso e erro usando o .invoke()', () => {
    cy.get('.success')
      .invoke('show')
      .should('be.visible')
      .and('contain', 'Mensagem enviada com sucesso.')
      .invoke('hide')
      .should('not.be.visible');
    cy.get('.error')
      .invoke('show')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat칩rios!')
      .invoke('hide')
      .should('not.be.visible');
  });

  it(`preenche a area de texto usando o comando invoke`, () => {
    const longText = Cypress._.repeat('0123456789', 20);
    cy.get('#open-text-area')
      .invoke('val', longText)
      .should('have.value', longText);
  });

  it('faz uma requisi칞칚o HTTP', () => {
    cy.request(
      'GET',
      'https://cac-tat.s3.eu-central-1.amazonaws.com/index.html'
    ).should((response) => {
      const { status, statusText, body } = response;
      expect(status).to.equal(200);
      expect(statusText).to.equal('OK');
      expect(body).to.include('CAC TAT');
    });
  });

  it.only('encontrar o gato escondido', () => {
    cy.get('#cat').invoke('show').should('be.visible');
    cy.get('#title').invoke('text', 'CAT TAT');
    cy.get('#subtitle').invoke('text', 'Eu 游눛 gatos');
  });
});
